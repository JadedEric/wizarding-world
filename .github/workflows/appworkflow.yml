name: Application Pipeline Workflow

on:
  pull_request:
    types:
      - opened
      - reopened
      - edited
      - synchronize

permissions:
  contents: read
  actions: read
  checks: write
  issues: read
  pull-requests: write   

jobs:
  setup_and_test:
    name: Setup and Test
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src

    steps:
      - name: ⬇️ Check-out repository
        uses: actions/checkout@v4

      - name: 📰 Install LCOV
        run: |
          sudo apt-get update
          sudo apt-get -y install lcov

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
          cache: 'gradle'

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: 🏡 List directory
        run: ls -a          

      - name: 🔭 Check Flutter version
        run: |
          flutter --version

      - name: 🔍 Get project dependencies        
        run: |
          flutter clean && \
          flutter pub get

      - name: 🏃 Run tests
        run: |
          flutter test --coverage

      - name: 🏃 Run analyze
        run: |
          flutter analyze       
        
      - name: 📈 Compile test results
        id: compile_test_results
        uses: dorny/test-reporter@v1        
        with:          
          name: '🧪📊 Unit tests report'
          path: test_reports/test-results.json
          reporter: 'flutter-json'
          max-annotations: '50'
          working-directory: 'src'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          files: |
            ${{github.workspace}}/src/test_reports/test-results.json

      - name: 🪪 Create test results badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.WIZARDING_WORLD_ACTIONS }}
          gistID: "c2f0af7b0a087eb6f9d0b210efe52b3f"
          filename: "wizardingworld.json"
          label: 'Tests'
          message: '${{ steps.compile_test_results.outputs.passed }} passed, ${{ steps.compile_test_results.outputs.failed }} failed'
          namedLogo: "TestCafe"
          labelColor: 'lightgrey'
          color: ${{ steps.compile_test_results.outputs.failed == 0 && 'brightgreen' ||  'red' }}

      - name: 📍Handle failures
        if: failure()
        run: |
          exit 1
